variables:
  GIT_STRATEGY: fetch
  DOCKER_FILE: gitlab-utils/Dockerfile
  DOCKER_TAG: ${CI_COMMIT_REF_SLUG}
  DOCKER_IMAGE_DEV: pycity_scheduling


stages:
  - prepare
  - test
  - release

prepare:
  stage: prepare
  script:
    - docker build
        --file ${DOCKER_FILE}
        --target base
        --tag ${DOCKER_IMAGE_DEV}:base-${DOCKER_TAG} .
    - docker build
        --file ${DOCKER_FILE}
        --target lint
        --tag ${DOCKER_IMAGE_DEV}:lint-${DOCKER_TAG} .
    - docker build
        --file ${DOCKER_FILE}
        --target doc
        --tag ${DOCKER_IMAGE_DEV}:doc-${DOCKER_TAG} .
    - docker build
      --file ${DOCKER_FILE}
      --target unittest
      --tag ${DOCKER_IMAGE_DEV}:unittest-${DOCKER_TAG} .
  tags:
    - shell
    - linux

unittest:
  stage: test
  image: ${DOCKER_IMAGE_DEV}:unittest-${DOCKER_TAG}
  tags:
    - docker
  script:
    - cd $CI_PROJECT_DIR/src
    - python3.6 -m pip install --no-cache-dir .
    - cd $CI_PROJECT_DIR/src/testing/unit_tests
    - python3.6 -m unittest discover -v

lint:
  stage: test
  image: ${DOCKER_IMAGE_DEV}:lint-${DOCKER_TAG}
  tags:
    - docker
  script:
    - cd $CI_PROJECT_DIR/src
    - python3.6 -m pip install --no-cache-dir .
    - pylint --rcfile=$CI_PROJECT_DIR/gitlab-utils/.pylintrc pycity_scheduling > $CI_PROJECT_DIR/src/pylint_report.txt || true
    - tail -n 2 pylint_report.txt
  artifacts:
    name: "pylint-report"
    paths:
      - $CI_PROJECT_DIR/src/pylint_report.txt
    expire_in: 4 weeks
    when: always

doc:
  stage: release
  only:
    - master
  image: ${DOCKER_IMAGE_DEV}:doc-${DOCKER_TAG}
  tags:
    - docker
  script:
    - cd $CI_PROJECT_DIR/src
    - python3.6 -m pip install --no-cache-dir .
    - cd $CI_PROJECT_DIR/docs
    - bash ./docu.sh
  artifacts:
    name: "documentation"
    paths:
      - $CI_PROJECT_DIR/docs/_build/html
    expire_in: 365 days
    when: always
